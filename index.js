"use strict";

import fetch from "node-fetch";
import {TOKEN, apikey, clothes} from  "./config.js"
import {Telegraf} from "telegraf"

const url = (city) =>
    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`;

const bot = new Telegraf(TOKEN)

bot.launch()
console.log("–ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ù—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ: @SomethingForBot")

//–°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.start(ctx => {
    ctx.reply("–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!")
})

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö
bot.on("voice", ctx => {
    ctx.reply("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –≤–º—ñ—é —Ä–æ–∑–º–æ–≤–ª—è—Ç–∏..")
})

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç—ñ–∫–µ—Ä—ñ–≤
bot.on("sticker", ctx => {
    ctx.reply("–ì–∞—Ä–Ω–∏–π —Å—Ç—ñ–∫–µ—Ä!")
})

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
bot.on("edited_message", ctx => {
    ctx.reply("–ù–∞–≤—ñ—â–æ –≤–∏ –∑–º—ñ–Ω–∏–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?")
})

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
bot.hears("/help",ctx => {
    ctx.reply("/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n" +
        "/help - –î–æ–ø–æ–º–æ–≥–∞ –∑ –±–æ—Ç–æ–º\n" +
        "/catfact - –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ –∫–æ—Ç—ñ–≤\n" +
        "/weather (–í–∞—à–µ –º—ñ—Å—Ç–æ) - –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ")
})

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ –¥–ª—è –≤–∏–¥–∞—á—ñ —Ñ–∞–∫—Ç—ñ–≤ –ø—Ä–æ –∫–æ—Ç–∏–∫—ñ–≤
bot.hears("/catfact",async ctx => {
        const CatFact = async ( )=> {
            try {
                await fetch("https://catfact.ninja/fact")   // –∑–º—É—à—É—î —á–µ–∫–∞—Ç–∏ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Å–µ—Ä–≤–µ—Ä—É
                    .then(function (resp) {
                        return resp.json()
                    })                               // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–∞–Ω—ñ –Ω–∞ json
                    .then(function (data) {
                        ctx.reply(data.fact);
                        // –ø–æ –ª–∞–Ω—Ü—é–∂–∫—É then-—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
                    })
            }
            catch(e){
                ctx.reply("–í–∏–±–∞—á—Ç–µ, —è –∑–ª–∞–º–∞–≤—Å—è, –º—ñ–π —Ç–≤–æ—Ä–µ—Ü—å –Ω–µ –¥—É–∂–µ —Ç—è–º—É—â–∏–π")
            }
        }
    ctx.reply("–°–ø–æ–¥—ñ–≤–∞—é—Å—è —Ü—ñ —Ñ–∞–∫—Ç–∏ –ø–æ–∫—Ä–∞—â–∏—Ç—å –≤–∞—à –Ω–∞—Å—Ç—Ä—ñ–π, –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –ø–æ–≥–æ–¥—Éüê±");
    await CatFact ( )
    console.log("–•—Ç–æ—Å—å –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    })

//–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –º—ñ—Å—Ç–∞
bot.on("text", async (ctx) => {
    const userMessage=ctx.message.text
    const city = userMessage.substr(9, userMessage.length)
    const ToCeliac = (degree) => (degree - 273).toFixed(2);

    const showWeather = async (data) => {
        try{
            const temp = ToCeliac(data.main.temp);
            const formatData = `
                –ú—ñ—Å—Ç–æüèò: ${city}
                \n–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–≥–æ–¥–∞üßæ: ${data.weather[0].main}
                \n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ–≥–æ–¥—Éüñä: ${data.weather[0].description}
                \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°: ${temp}
                \n–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—Éüå¨: ${data.wind.speed}
                \n–í–æ–ª–æ–≥—ñ—Å—Ç—åüí¶: ${data.main.humidity}%`
                await ctx.replyWithPhoto({source: "./images/"+data.weather[0].main+".jpg"},{caption: formatData})
                for (let key in clothes) {
                    if (key==data.weather[0].main){
                        ctx.reply(clothes[key])
                    }
                }

        } catch (e){
            ctx.reply("–¢–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–∏—Ç")
        }
    };

    const FindDataForWeather = async (city) => {
        try {
            await fetch(url(city))
                .then(function (resp) {
                    return resp.json()
                })
                .then(function (data) {
                    showWeather(data);
                })
        } catch (e) {
            ctx.reply("–¢–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –∑–∞–ø–∏—Ç")
        }
    }
    if (userMessage.includes("/weather")) {
        await FindDataForWeather(city)
    } else {
        ctx.reply("–¢–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /help")
    }
    console.log("–•—Ç–æ—Å—å –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
})
