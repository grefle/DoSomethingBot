"use strict";

import fetch from "node-fetch";
import {TOKEN, apikey} from  "./config.js"
import {Telegraf} from "telegraf"

const url = (city) =>
    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`;

const bot = new Telegraf(TOKEN)

//–°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.start(ctx => {
    ctx.reply("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
bot.on("voice", ctx => {
    ctx.reply("–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
bot.on("sticker", ctx => {
    ctx.reply("–•–æ—Ä–æ—à–∏–π —Å—Ç–∏–∫–µ—Ä, –∂–∞–ª—å —è –µ–≥–æ –Ω–µ –≤–∏–∂—É")
})

//—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on("edited_message", ctx => {
    ctx.reply("–ó–∞—á–µ–º –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ?")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–∞ –ø–æ–º–æ—â–∏
bot.hears("/help",ctx => {
    ctx.reply("/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
        "/help - –ü–æ–º–æ—â—å —Å –±–æ—Ç–æ–º\n" +
        "/catfact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ –∫–æ—Ç–æ–≤\n" +
        "/weather (–í–∞—à –≥–æ—Ä–æ–¥) - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤
bot.hears("/catfact",async ctx => {
        const CatFact = async ( )=> {
            ctx.reply("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Ñ–∞–∫—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µüê±");
            try {
                await fetch("https://catfact.ninja/fact")
                    .then(function (resp) {
                        return resp.json()
                    })
                    .then(function (data) {
                        ctx.reply(data.fact);
                    })
            }
            catch(e){
                ctx.reply("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å–ª–æ–º–∞–ª—Å—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –æ—á–µ–Ω—å —Å–º—ã—à–ª–µ–Ω—ã–π")
            }
        }
    await CatFact ( )
    })

bot.launch()
console.log("My Bot started")

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≥–æ—Ä–æ–¥–∞
bot.on("text", async (ctx) => {
    if (ctx.message.text.includes("/weather")) {
        const userMessage=ctx.message.text
        const city = userMessage.substr(9, userMessage.length)

        const ToCeliac = (degree) => (degree - 273).toFixed(2);

        const showWeather = (data) => {
            const temp = ToCeliac(data.main.temp);
            const formatData = `
           –ì–æ—Ä–æ–¥üèò: ${city}
           \n–û–±—â–∞—è –ø–æ–≥–æ–¥–∞üßæ: ${data.weather[0].main}
           \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°: ${temp}
           \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå¨: ${data.wind.speed}
           \n–í–ª–∞–∂–Ω–æ—Å—Ç—åüí¶: ${data.main.humidity}%`
            switch (data.weather[0].main) {
                case "Clear":
                    ctx.replyWithPhoto({ source: "./images/Clear.jpg" }, { caption: formatData })
                    break;
                case "Clouds":
                    ctx.replyWithPhoto({source:"./images/Clouds.jpg"}, { caption: formatData })
                    break;
                case "Rain":
                    ctx.replyWithPhoto({source:"./images/Rain.jpg"}, { caption: formatData })
                    break;
                case "Snow":
                    ctx.replyWithPhoto({source:"./images/Snow.jpg"}, { caption: formatData })
                    break;
            }
        };

        const FindDataForWeather = async (city) => {
            try {
                await fetch(url(city))
                    .then(function (resp) {
                        return resp.json()
                    }) // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ json
                    .then(function (data) {
                        showWeather(data);
                    })
            } catch (e) {
                ctx.reply("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å")
            }
        }

        await FindDataForWeather(city)

    } else {
        ctx.reply("–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")
    }
})
