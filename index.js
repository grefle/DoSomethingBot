"use strict";

import fetch from "node-fetch";
import {TOKEN, apikey, clothes} from  "./config.js"
import {Telegraf} from "telegraf"

const url = (city) =>
    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`;

const bot = new Telegraf(TOKEN)

//–°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.start(ctx => {
    ctx.reply("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
bot.on("voice", ctx => {
    ctx.reply("–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
bot.on("sticker", ctx => {
    ctx.reply("–•–æ—Ä–æ—à–∏–π —Å—Ç–∏–∫–µ—Ä, –∂–∞–ª—å —è –µ–≥–æ –Ω–µ –≤–∏–∂—É")
})

//—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on("edited_message", ctx => {
    ctx.reply("–ó–∞—á–µ–º –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ?")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–∞ –ø–æ–º–æ—â–∏
bot.hears("/help",ctx => {
    ctx.reply("/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
        "/help - –ü–æ–º–æ—â—å —Å –±–æ—Ç–æ–º\n" +
        "/catfact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ –∫–æ—Ç–æ–≤\n" +
        "/weather (–í–∞—à –≥–æ—Ä–æ–¥) - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
})

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤
bot.hears("/catfact",async ctx => {
        const CatFact = async ( )=> {
            try {
                await fetch("https://catfact.ninja/fact")   // –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä—É
                    .then(function (resp) {
                        return resp.json()
                    })                               // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ json
                    .then(function (data) {
                        ctx.reply(data.fact);        // –ø–æ —Ü–µ–ø–æ—á–∫–µ then-–æ–≤ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    })
            }
            catch(e){
                ctx.reply("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å–ª–æ–º–∞–ª—Å—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –æ—á–µ–Ω—å —Å–º—ã—à–ª–µ–Ω—ã–π")
            }
        }
    ctx.reply("–ù–∞–¥–µ—é—Å—å —ç—Ç–∏ —Ñ–∞–∫—Ç—ã —É–ª—É—á—à–∏—Ç –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–æ–≥–æ–¥—Éüê±");
    await CatFact ( )
    })

bot.launch()
console.log("My Bot started")

//–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≥–æ—Ä–æ–¥–∞
bot.on("text", async (ctx) => {
    const userMessage=ctx.message.text
    const city = userMessage.substr(9, userMessage.length)
    const ToCeliac = (degree) => (degree - 273).toFixed(2);

    const showWeather = async (data) => {
        try{
            const temp = ToCeliac(data.main.temp);
            const formatData = `
                –ì–æ—Ä–æ–¥üèò: ${city}
                \n–û–±—â–∞—è –ø–æ–≥–æ–¥–∞üßæ: ${data.weather[0].main}
                \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°: ${temp}
                \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå¨: ${data.wind.speed}
                \n–í–ª–∞–∂–Ω–æ—Å—Ç—åüí¶: ${data.main.humidity}%`
                await ctx.replyWithPhoto({source: "./images/"+data.weather[0].main+".jpg"},{caption: formatData})
                for (let key in clothes) {
                    if (key==data.weather[0].main){
                        ctx.reply(clothes[key])

                    }
                }

        } catch (e){
            ctx.reply("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å")
        }
    };

    const FindDataForWeather = async (city) => {
        try {
            await fetch(url(city))               // –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä—É
                .then(function (resp) {
                    return resp.json()
                })                               // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ json
                .then(function (data) {
                    showWeather(data);           // –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏
                })
        } catch (e) {
            ctx.reply("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å")
        }
    }
    if (userMessage.includes("/weather")) {
        await FindDataForWeather(city)
    } else {
        ctx.reply("–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")
    }
    console.log("–ö—Ç–æ-—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
})
